#!/bin/sh
#
# script: bookmark
# description: a simple, extensible, POSIX compliant bookmarking shell script
# dependencies: dmenu, fzf
# optional dependencies: rofi (required for -m rofi), xdotool (required for -a paste), 
#                        libnotify (required for -n), xclip (required for -a add)
# github: https://github.com/hollowillow/scripts
#

### DEFAULTS ###

# define menu defaults
# can be defined globally by exporting TERM_MENU and GUI_MENU in shell
if [ -z "$TERM_MENU" ]; then
        TERM_MENU="fzf --header=bookmark.sh --bind=enter:replace-query+print-query --prompt"
fi

if [ -z "$GUI_MENU" ]; then
        GUI_MENU="dmenu -i -l 20 -p"
fi

# dynamically use menu based on whether script is run in terminal or via keybind
# can be overwritten by using the -m option
if [ -t 0 ]; then
        menu="$TERM_MENU"
else
        menu="$GUI_MENU"
fi

# default action
# can be overwritten by using the -a option
action="pasteBookmark"

# default file
# can be overwritten by using the -f option
file="$HOME/bookmark.md"

# default output feedback
# the -q option switches between the boolean states
quiet=0

### OPTIONS ###

helpMessage() {

printf "bookmark is a simple, extensible, POSIX compliant bookmarking shell script
Github: https://github.com/hollowillow/scripts\n 
\tUsage: bookmark [options] [arguments]\n 
OPTIONS\n 
\t-h\tDisplay this help message
\t-q\tToggle between sending feedback 
\t-m\tChoose selection menu
\t\t[dmenu|rofi|fzf] (default: dynamic)
\t-a\tChoose an action, when adding a bookmark uses text copied in clipboard by default 
\t\t[paste|add|remove|open] (default: paste) 
\t-f\tChoose a file or directory, multiple paths can be specified by using the option multiple times,
\t\tspecifying a directory provides all the files within it and its subdirectories
\t\t(default: \$HOME/bookmarks.md)\n
EXAMPLES\n
\tbookmark\t\t\tPastes a bookmark from \$HOME/bookmarks.md chosen with dmenu
\tbookmark -m rofi -a add\t\tBookmarks text copied in clipboard to \$HOME/bookmarks.md, with rofi as the menu
\tbookmark -f file1 -f file2\tAsks which file you want to select with dmenu, then pastes from said file\n \n"
}

sendFeedback () {
        if [ -n "$feedback" ] && [ "$quiet" -ne 1 ]; then
                if [ -t 0 ]; then
                        printf '%s\n' "$feedback"
                else
                        notify-send "$feedback"
                fi;
        fi
}

menuSelection () {
        case "${OPTARG}" in 
                # menu commands must end with a prompt option in order to display prompts properly"
                dmenu) menu="dmenu -i -l 20 -p";;
                rofi) menu="rofi -dmenu -i -window-title bookmark.sh -p";;
                # fzf has to run within a terminal, not usable systemwide
                fzf) menu="fzf --header=bookmark.sh --bind=enter:replace-query+print-query --prompt";;
                *) feedback="Error: Argument \"""${OPTARG}""\" is not available for option -m"; sendFeedback && exit 1;;
        esac
}

actionSelection() {
        case "${OPTARG}" in
                add) action="addBookmark";;
                paste) action="pasteBookmark";;
                remove) action="removeBookmark";;
                open) action="openBookmark";;
                *) feedback="Error: Argument \"""${OPTARG}""\" is not available for option -a"; sendFeedback && exit 1;;
        esac
}

fileSelection () {
NL='
'
        files="$files$(find "${OPTARG}" -type f)$NL"
        
        if [ -d "${OPTARG}" ]; then
                num=$((num+2)); fi
        if [ -f "${OPTARG}" ]; then
                num=$((num+1)); fi
}

### ACTIONS ###
addBookmark() {
        # default: bookmark what is copied in clipboard '-selection clipboard'
        # for bookmarking highlited selection use '-selection primary'
        bookmark=$(xclip -o -selection clipboard)

        if grep -q "^$bookmark" "$file"; then
                feedback="Already bookmarked!"; sendFeedback
        else
                #using the menu you can type in metadata to your bookmark that can be useful when searching for it
                printf "%s\n" "$bookmark $(printf '\n' | ${menu} 'Add metadata: ')" >> "$file"
                feedback="Bookmark \"$bookmark\" added to \"$file\"."; sendFeedback
        fi
}

pasteBookmark() {
        bookmark=$(sed "/^#/ d; /^$/ d" "$file" | ${menu} "Select bookmark: " | cut -d' ' -f1)

        # default: automatically out the bookmark using 'xdotool type'
        # for copying it into your clipboard use 'xclip -i'
        if [ -n "$bookmark" ]; then
                xdotool type "$bookmark"
                feedback="Bookmark \"$bookmark\" pasted."; sendFeedback
        else
                feedback="Error: No bookmark selected"; sendFeedback && exit 1
        fi
}

removeBookmark() {
        bookmark=$(sed "/^#/ d; /^$/ d;" "$file" | ${menu} "Select bookmark: " | cut -d' ' -f1)
        sed -i "\|$bookmark| d;" "$file"
        feedback="Bookmark \"$bookmark\" removed from \"$file\"."; sendFeedback
}

openBookmark() {
        # default: choices for open option 'mpv --fs\nfirefox\nxdotool type'
        # to add more options, simply type the command you want and separte it with '\n'
        open="firefox\nmpv --fs\nxdotool type"
        bookmark=$(sed "/^#/ d; /^$/ d" "$file" | ${menu} "Select bookmark: " | cut -d' ' -f1)
        $(printf "%s$open" | ${menu} "Open with: ") "$bookmark"
        feedback="Bookmark \"$bookmark\" opened."; sendFeedback
}

### OPTION HANDLING ###
while getopts ":f:a:m:qh" OPT
do
   case "$OPT" in
           f) fileSelection;;
           a) actionSelection;;
           m) menuSelection;;
           q) if [ "$quiet" -eq 0 ]; then quiet=1; else quiet=0; fi;;
           h) helpMessage && exit 1;;
           :) printf '%s\n' "Error: Option -""${OPTARG}"" requires an argument" && exit 1;;
           \?) printf '%s\n' "Error: Option -""${OPTARG}"" is not an option" && exit 1;;
   esac
done

### FILE HANDLING ### 
if [ -n "$num" ]; then 
        #If only one file was selected, skip menu selection
        if [ "$num" -eq 1 ]; then
        #Uses printf in order to get rid of embedded newline
        file="$(printf '%s' "$files")"; fi

        #If multiple files or any directories were selected, invoke menu
        if [ "$num" -gt 1 ]; then
        file=$(printf '%s\n' "$files" | ${menu} "Select file: "); fi
fi

if [ -z "$file" ]; then
        feedback="Error: No file selected"; sendFeedback && exit 1;
fi

### RUN ###
"${action}"
